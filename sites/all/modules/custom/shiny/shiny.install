<?php

//create field if not created
function shiny_install(){

    //check to see if shiny field exits.
    $field = field_info_field('shiny');

    if(empty($field)){
        $field = array (
            'field_name' => 'shiny',
            'type' => 'text_with_summary',
            'entity_types' => array('node'),
            // 'translatable' => TRUE,
        );
        $field = field_create_field($field);
    }



}


function shiny_schema(){
    $schema['shiny'] = array(
        'description' => 'Store shiny block information. Uniquely connects datablock node to a shiny block',
        'fields' => array(
            //fields
            'sid'=> array(
                //serial is auto increment
                'type' => 'serial',
                'not null' => TRUE,
                'description' => t('Shiny block id')
            ),            
            'nid'=> array(
                'type' => 'int',
                'unsigned' => TRUE,
                'not null' => TRUE,
                'default' => 0,
                'description' => t('Node id')
            ),
            // 'nua' => array(
            //     'type' => 'text',
            //     'size' => 'tiny',
            //     'not null' => FALSE,
            //     'description' => t('Node url alias')
            // ),
            'datablock_type' => array(
                'type' => 'text',
                'size' => 'medium',
                'not null' => TRUE,
                'description' => t('Datablock type: Process, Compound, System ')                
            ),
            'datablock_name' => array(
                'type' => 'text',
                'size' => 'medium',
                'not null' => TRUE,
                'description' => t('Datablock name')
            ),
            'configs' => array(
                'type' => 'int',
                'size' => 'tiny',
                'not null' => TRUE,
                'default' => '0',
                'description' => t('Indicate if this has more than 1 shiny configuration file. 0==false')
            ),                

        ), //fields
        'primary key' => array('sid'), //primary key
        'unique keys' => array(
            'nid' => array('nid'),
        ),
        'indexes' => array(
            'sid' => array('sid'),
        ),
    ); //$schema

    return $schema;


}



function shiny_uninstall(){

    watchdog('Shiny Module', 'Uninstalling module and deleting its instances');

    $types = node_type_get_types();

    foreach ($types as $type) {
        shiny_delete_shiny($type);
    }

    $field = field_info_field('shiny');

    if($field){
        field_delete_field('shiny');
    }

    variable_del('shiny_nodetypes');
}

function shiny_delete_shiny($type){
    $instance = field_info_instance('node', 'shiny', $type->type);

    if($instance){
        field_delete_instance($instance);
    }
}